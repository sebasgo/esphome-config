---

substitutions:
  dev_id: greenhouse
  dev_name: Gewächshaus

packages:
  device_base: !include common/az-delivery-devkit-v4.yaml

globals:
  - id: temps_buf_indoor
    type: float[24*60]
  - id: temps_buf_outdoor
    type: float[24*60]
  - id: temps_buf_indoor_index
    type: int
    initial_value: "0"
  - id: temps_buf_outdoor_index
    type: int
    initial_value: "0"

esphome:
  on_boot:
    priority: 700 # before sensors
    then:
      - lambda: |-
          auto& buf_indoor = id(temps_buf_indoor);
          auto& buf_outdoor = id(temps_buf_outdoor);
          for (int i=0; i < sizeof(buf_indoor) / sizeof(buf_indoor[0]); i++) {
              buf_indoor[i] = NAN;
              buf_outdoor[i] = NAN;
          }

dallas:
  - pin: 32
    update_interval: 60s

sensor:
  - platform: dallas
    id: temp_indoor
    address: 0x9201206378C4B428
    name: ${dev_name} Temperatur innen
    icon: "mdi:thermometer"
    on_value:
      then:
      - lambda: |-
          auto& buf = id(temps_buf_indoor);
          auto& i = id(temps_buf_indoor_index);
          buf[i++] = x;
          float min_temp{x};
          float max_temp{x};
          for (int i=0; i < sizeof(buf) / sizeof(buf[0]); i++) {
              min_temp = min(min_temp, buf[i]);
              max_temp = max(max_temp, buf[i]);
          }
          id(temp_indoor_min).publish_state(min_temp);
          id(temp_indoor_max).publish_state(max_temp);
  - platform: dallas
    id: temp_outdoor
    address: 0xA10120637C47ED28
    name: ${dev_name} Temperatur außen
    icon: "mdi:thermometer"
    on_value:
      then:
      - lambda: |-
          auto& buf = id(temps_buf_outdoor);
          auto& i = id(temps_buf_outdoor_index);
          buf[i++] = x;
          float min_temp{x};
          float max_temp{x};
          for (int i=0; i < sizeof(buf) / sizeof(buf[0]); i++) {
              min_temp = min(min_temp, buf[i]);
              max_temp = max(max_temp, buf[i]);
          }
          id(temp_outdoor_min).publish_state(min_temp);
          id(temp_outdoor_max).publish_state(max_temp);
  - platform: template
    id: temp_indoor_min
    name: ${dev_name} Temperatur innen min
    update_interval: 60s
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    icon: "mdi:thermometer-low"
  - platform: template
    id: temp_indoor_max
    name: ${dev_name} Temperatur innen max
    update_interval: 60s
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    icon: "mdi:thermometer-high"
  - platform: template
    id: temp_outdoor_min
    name: ${dev_name} Temperatur außen min
    update_interval: 60s
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    icon: "mdi:thermometer-low"
  - platform: template
    id: temp_outdoor_max
    name: ${dev_name} Temperatur außen max
    update_interval: 60s
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    icon: "mdi:thermometer-high"

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 19

# color:
#   - id: white
#     red: 100%
#     green: 100%
#     blue: 100%
# 
# font:
#   - file: fonts/FiraSans-Medium.ttf
#     id: fira_medium
#     size: 20
# 
# display:
#   - platform: ili9341
#     model: TFT 2.4
#     cs_pin: 5
#     dc_pin: 4
#     # led_pin: 15
#     reset_pin: 22
#     # rotation: 90
#     lambda: |-
#       it.print(0, 0, id(fira_medium), COLOR_WHITE, TextAlign::TOP_LEFT, "Hello World!");
# 
# output:
#   - platform: ledc
#     id: display_backlight_output
#     pin: 15
# 
# light:
#   - platform: monochromatic
#     id: backlight
#     name: ${dev_name} Hintergrundbeleuchtung
#     output: display_backlight_output
#     restore_mode: ALWAYS_ON

xpt2046:
  id: touchscreen
  cs_pin: 14
  irq_pin: 27
  dimension_x: 240
  dimension_y: 320
  calibration_x_min: 220
  calibration_x_max: 3840
  calibration_y_min: 335
  calibration_y_max: 3860
  on_state:
    - lambda: |-
        if (touched)
          ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%d", id(touchscreen).x, id(touchscreen).y, id(touchscreen).x_raw, id(touchscreen).y_raw);

