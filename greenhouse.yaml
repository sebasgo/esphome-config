---

substitutions:
  dev_id: greenhouse
  dev_name: Gewächshaus

packages:
  device_base: !include common/az-delivery-devkit-v4.yaml

globals:
  - id: temps_buf_indoor
    type: float[24*60]
  - id: temps_buf_outdoor
    type: float[24*60]
  - id: temps_buf_indoor_index
    type: int
    initial_value: "0"
  - id: temps_buf_outdoor_index
    type: int
    initial_value: "0"

esphome:
  on_boot:
    priority: 700 # before sensors
    then:
      - lambda: |-
          auto& buf_indoor = id(temps_buf_indoor);
          auto& buf_outdoor = id(temps_buf_outdoor);
          for (int i=0; i < 1440; i++) {
              buf_indoor[i] = NAN;
              buf_outdoor[i] = NAN;
          }

time:
  - platform: homeassistant
    id: hatime

dallas:
  - pin: 32
    update_interval: 60s

sensor:
  - platform: dallas
    id: temp_indoor
    address: 0x9201206378C4B428
    name: ${dev_name} Temperatur innen
    icon: "mdi:thermometer"
    on_value:
      then:
      - lambda: |-
          auto& buf = id(temps_buf_indoor);
          auto& i = id(temps_buf_indoor_index);
          i = (i+1) % 1440;
          buf[i] = x;
          float min_temp{x};
          float max_temp{x};
          for (int i=0; i < sizeof(buf) / sizeof(buf[0]); i++) {
              min_temp = min(min_temp, buf[i]);
              max_temp = max(max_temp, buf[i]);
          }
          id(temp_indoor_min).publish_state(min_temp);
          id(temp_indoor_max).publish_state(max_temp);
  - platform: dallas
    id: temp_outdoor
    address: 0xA10120637C47ED28
    name: ${dev_name} Temperatur außen
    icon: "mdi:thermometer"
    on_value:
      then:
      - lambda: |-
          auto& buf = id(temps_buf_outdoor);
          auto& i = id(temps_buf_outdoor_index);
          i = (i+1) % 1440;
          buf[i] = x;
          float min_temp{x};
          float max_temp{x};
          for (int i=0; i < sizeof(buf) / sizeof(buf[0]); i++) {
              min_temp = min(min_temp, buf[i]);
              max_temp = max(max_temp, buf[i]);
          }
          id(temp_outdoor_min).publish_state(min_temp);
          id(temp_outdoor_max).publish_state(max_temp);
  - platform: template
    id: temp_indoor_min
    name: ${dev_name} Temperatur innen min
    update_interval: 60s
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    icon: "mdi:thermometer-low"
  - platform: template
    id: temp_indoor_max
    name: ${dev_name} Temperatur innen max
    update_interval: 60s
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    icon: "mdi:thermometer-high"
  - platform: template
    id: temp_outdoor_min
    name: ${dev_name} Temperatur außen min
    update_interval: 60s
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    icon: "mdi:thermometer-low"
  - platform: template
    id: temp_outdoor_max
    name: ${dev_name} Temperatur außen max
    update_interval: 60s
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    icon: "mdi:thermometer-high"

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 19

color:
  - id: blue_bg
    red: 0%
    green: 24%
    blue: 62%
  - id: blue
    red: 0%
    green: 0%
    blue: 100%
  - id: red
    red: 100%
    green: 0%
    blue: 0%
  - id: green
    red: 0%
    green: 100%
    blue: 0%
  - id: grey_bg
    red: 80%
    green: 80%
    blue: 80%
  - id: grey_grid_lines
    red: 70%
    green: 70%
    blue: 70%

font:
  - file: fonts/slkscr.ttf
    id: slkscr
    size: 8  # 5px
  - file: fonts/arial.ttf
    id: arial16
    size: 19  # 14px
    glyphs: '!"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyzß'
  - file: fonts/arial.ttf
    id: arial36
    size: 47

display:
  - platform: ili9341
    model: TFT 2.4
    cs_pin: 5
    dc_pin: 4
    reset_pin: 22
    lambda: |-
      using namespace dallas;
      using namespace template_;
      using TempBuf = float[24*60];
      auto draw_header = [&it]() {
          it.filled_rectangle(0, 0, 240, 24, id(blue_bg));
          // it.horizontal_line(0, 5, 240, id(red));
          // it.horizontal_line(0, 18, 240, id(red));
          const auto now = id(hatime).now();
          if (now.is_valid()) {
              it.strftime(3, 19, id(arial16), COLOR_WHITE, TextAlign::BASELINE_LEFT, "%H:%M", now);
          }
          else {
              it.print(3, 19, id(arial16), COLOR_WHITE, TextAlign::BASELINE_LEFT, "--:--");
          }
          auto rssi = WiFi.RSSI();
          it.filled_rectangle(221, 16, 4, 4, (rssi >= -80)? COLOR_WHITE: id(grey_grid_lines));
          it.filled_rectangle(225, 12, 4, 8, (rssi >= -70)? COLOR_WHITE: id(grey_grid_lines));
          it.filled_rectangle(229, 8, 4, 12, (rssi >= -65)? COLOR_WHITE: id(grey_grid_lines));
          it.filled_rectangle(233, 4, 4, 16, (rssi >= -50)? COLOR_WHITE: id(grey_grid_lines));
          if (!id(native_api).is_connected()) {
              it.line(221, 4, 221+6, 4+6, id(red));
              it.line(221+1, 4, 221+6, 4+5, id(red));
              it.line(221, 4+1, 221+5, 4+6, id(red));
              it.line(221, 4+6, 221+6, 4, id(red));
              it.line(221, 4+5, 221+5, 4, id(red));
              it.line(221+1, 4+6, 221+6, 4+1, id(red));
          }
      };
      auto draw_temps = [&it](int y, char* label, DallasTemperatureSensor* t, TemplateSensor* t_min, TemplateSensor* t_max) {
          it.filled_rectangle(0, y, 240, 44, id(grey_bg));
          // it.horizontal_line(0, y+5, 240, id(red));
          // it.horizontal_line(0, y+18, 240, id(red));
          // it.horizontal_line(0, y+25, 240, id(red));
          // it.horizontal_line(0, y+38, 240, id(red));
          it.print(3, y+19, id(arial16), COLOR_BLACK, TextAlign::BASELINE_LEFT, label);
          if (t->has_state()) {
              it.printf(160, y+39, id(arial36), COLOR_BLACK, TextAlign::BASELINE_RIGHT, "%.1f", t->state);
          }
          else {
              it.print(160, y+39, id(arial36), COLOR_BLACK, TextAlign::BASELINE_RIGHT, "-");
          }
          it.print(160, y+19, id(arial16), COLOR_BLACK, TextAlign::BASELINE_LEFT, "°C");
          if (t_min->has_state()) {
              it.printf(236, y+19, id(arial16), id(blue), TextAlign::BASELINE_RIGHT, "%.1f", t_min->state);
          }
          else {
              it.print(236, y+19, id(arial16), id(blue), TextAlign::BASELINE_RIGHT, "-");
          }
          if (t_max->has_state()) {
              it.printf(236, y+39, id(arial16), id(red), TextAlign::BASELINE_RIGHT, "%.1f", t_max->state);
          }
          else {
              it.print(236, y+39, id(arial16), id(red), TextAlign::BASELINE_RIGHT, "-");
          }
      };
      auto draw_temp_plot = [&it](int y, const TempBuf& temp_buf, int buf_idx, float t_min_f, float t_max_f) {
          if (isnan(t_min_f)) {
              t_min_f = 0.;
          }
          if (isnan(t_max_f)) {
              t_max_f = 20.;
          }
          auto now = id(hatime).now();
          const int t_min = 5 * floor(t_min_f / 5);
          const int t_max = 5 * ceil(t_max_f / 5);
          const float px_per_degree = 104. / (t_max - t_min);
          int midnight_index = (buf_idx + 1440 - now.hour * 60 - now.minute) % 1440;
          
          // background
          it.filled_rectangle(0, y, 240, 104, COLOR_WHITE);

          // vertical grid lines 
          for (int gx = 10; gx < 240; gx += 10) {
              int gdy = (gx % 30 == 0)? 1: 2;
              for (int gy = y; gy < y+104; gy += gdy) {
                  it.draw_pixel_at(gx, gy, id(grey_grid_lines));
              }
          }

          // x axis labels
          for (int i=1; i < 8; i++) {
              it.printf(30*i+1, y+102, id(slkscr), COLOR_BLACK, TextAlign::BASELINE_LEFT, "%02i:00", 3*i);
          }

          // horizontal grid lines
          for (int t=1; t < t_max-t_min; t++) {
              int dx = (t%5 == 0)? 1: 2;
              int gy = y + 104 - round(t * px_per_degree);
              // ESP_LOGD("Display", "t=%i gy=%i, dx=%i", t, gy, dx);
              for (int gx = 0; gx < 240; gx += dx) {
                  it.draw_pixel_at(gx, gy, id(grey_grid_lines));
              }
          }

          // y axis labels
          it.printf(0, y+102, id(slkscr), COLOR_BLACK, TextAlign::BASELINE_LEFT, "%i", t_min);
          it.printf(0, y+6, id(slkscr), COLOR_BLACK, TextAlign::BASELINE_LEFT, "%i", t_max);
          
          // scatter plot for temps
          for (int i = 0, j = midnight_index; i < 1440; i++, j = (j+1)%1440) {
              const float t = temp_buf[j];
              if (!isnan(t)) {
                  const int tx = i / 6;
                  const int ty = y + 104 - round((t-t_min) * px_per_degree);
                  // it.draw_pixel_at(tx, ty, id(red));
                  it.filled_rectangle(tx-1, ty-1, 3, 3, id(red));
              }
          }
      };
      if(id(backlight_script).is_running()) {
          draw_header();
          draw_temp_plot(68, id(temps_buf_indoor), id(temps_buf_indoor_index), id(temp_indoor_min).state, id(temp_indoor_max).state);
          draw_temp_plot(216, id(temps_buf_outdoor), id(temps_buf_outdoor_index), id(temp_outdoor_min).state, id(temp_outdoor_max).state);
          draw_temps(24, "Innen", id(temp_indoor), id(temp_indoor_min), id(temp_indoor_max));
          draw_temps(172, "Außen", id(temp_outdoor), id(temp_outdoor_min), id(temp_outdoor_max));
      }
      else {
          // burn-in prevention: screen is normally-white, so set entire screen to this color
          it.filled_rectangle(0, 0, 240, 320, COLOR_WHITE);
      }
output:
  - platform: ledc
    id: display_backlight_output
    pin: 15
    inverted: yes

script:
  - id: backlight_script
    mode: restart
    then:
      - light.turn_on: backlight
      - delay: 1 min
      - light.turn_off: backlight


light:
  - platform: monochromatic
    id: backlight
    name: ${dev_name} Hintergrundbeleuchtung
    output: display_backlight_output
    restore_mode: ALWAYS_OFF

xpt2046:
  id: touchscreen
  cs_pin: 14
  irq_pin: 27
  dimension_x: 240
  dimension_y: 320
  calibration_x_min: 220
  calibration_x_max: 3840
  calibration_y_min: 335
  calibration_y_max: 3860
  on_state:
    - lambda: |-
        if (touched) {
          ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%d", id(touchscreen).x, id(touchscreen).y, id(touchscreen).x_raw, id(touchscreen).y_raw);
          id(backlight_script).execute();
        }

