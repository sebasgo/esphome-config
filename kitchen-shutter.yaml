---
substitutions:
  dev_id: kitchen-shutter
  dev_name: Jalousie KÃ¼che

packages:
  device_base: !include common/lanbon-l8hs.yaml

esphome:
  includes:
    - common/lvgl/lvgl_components.h
    - kitchen-shutter-ui.h
    - kitchen-shutter-ui.cpp

cover:
  - platform: time_based
    id: cover_
    name: ${dev_name}
    device_class: shutter

    open_action:
      - switch.turn_off: shutter_relay_down
      - switch.turn_on: shutter_relay_up
    open_duration: 24sec

    close_action:
      - switch.turn_off: shutter_relay_up
      - switch.turn_on: shutter_relay_down
    close_duration: 24sec

    stop_action:
      - switch.turn_off: shutter_relay_up
      - switch.turn_off: shutter_relay_down

time:
  - platform: homeassistant
    on_time:
      - seconds: 0
        then:
          - lambda: |-
              auto ui = static_cast<KitchenShutterUI*>(id(kitchen_shutter_ui));
              ui->set_time(id(homeassistant_time).now());
    on_time_sync:
      then:
        - lambda: |-
            auto ui = static_cast<KitchenShutterUI*>(id(kitchen_shutter_ui));
            ui->set_time(id(homeassistant_time).now());

sensor:
  - platform: homeassistant
    internal: yes
    device_class: "temperature"
    state_class: "measurement"
    id: temp_sensor
    entity_id: sensor.gewachshaus_temperatur_aussen
    on_value:
      then:
        - lambda: |-
            auto ui = static_cast<KitchenShutterUI*>(id(kitchen_shutter_ui));
            ui->set_temp(x);


custom_component:
  - lambda: |-
      auto ui = new KitchenShutterUI();
      return {ui};
    components:
      id: kitchen_shutter_ui


switch:
  - platform: gpio
    pin: GPIO12
    id: shutter_relay_up
    name: ${dev_name} Shutter Relay Up
    restore_mode: ALWAYS_OFF
    interlock: [shutter_relay_down]
    on_turn_on:
      - switch.turn_on: shutter_up_switch
    on_turn_off:
      - switch.turn_off: shutter_up_switch

  - platform: gpio
    pin: GPIO14
    id: shutter_relay_down
    name: ${dev_name} Shutter Relay Down
    restore_mode: ALWAYS_OFF
    interlock: [shutter_relay_up]
    on_turn_on:
      - switch.turn_on: shutter_down_switch
    on_turn_off:
      - switch.turn_off: shutter_down_switch

  - platform: custom
    lambda: |-
      auto ui = static_cast<KitchenShutterUI*>(id(kitchen_shutter_ui));
      auto shutter_up_switch = ui->create_shutter_up_switch();
      auto shutter_down_switch = ui->create_shutter_down_switch();
      auto shutter_stop_switch = ui->create_shutter_stop_switch();
      auto shutter_auto_switch = ui->create_shutter_auto_switch();
      App.register_component(shutter_up_switch);
      App.register_component(shutter_down_switch);
      App.register_component(shutter_stop_switch);
      App.register_component(shutter_auto_switch);
      return {shutter_up_switch, shutter_down_switch, shutter_stop_switch, shutter_auto_switch};
    switches:
      - id: shutter_up_switch
        internal: yes
        on_turn_on:
          - if:
              condition:
                lambda: |-
                  return id(cover_).position == COVER_OPEN;
              then:
                - switch.turn_off: shutter_up_switch
              else:
                - cover.open: cover_
        on_turn_off:
          - if:
              condition:
                lambda: |-
                  return id(cover_).current_operation == CoverOperation::COVER_OPERATION_OPENING;
              then:
                - cover.stop: cover_
      - id: shutter_down_switch
        internal: yes
        on_turn_on:
          - if:
              condition:
                lambda: |-
                  return id(cover_).position == COVER_CLOSED;
              then:
                - switch.turn_off: shutter_down_switch
              else:
                - cover.close: cover_
        on_turn_off:
          - if:
              condition:
                lambda: |-
                  return id(cover_).current_operation == CoverOperation::COVER_OPERATION_CLOSING;
              then:
                - cover.stop: cover_
      - id: shutter_stop_switch
        internal: yes
        on_turn_on:
          - if:
              condition:
                lambda: |-
                  return id(cover_).current_operation != CoverOperation::COVER_OPERATION_IDLE;
              then:
                - cover.stop: cover_
          - switch.turn_off: shutter_stop_switch
      - id: shutter_auto_switch
        name: ${dev_name} Lichtautomatik

binary_sensor:
  - platform: custom
    lambda: |-
      auto ui = static_cast<KitchenShutterUI*>(id(kitchen_shutter_ui));
      auto sensor = new LvglIdleSensor(ui);
      App.register_component(sensor);
      return {sensor};
    binary_sensors:
      id: lvgl_idle_sensor
      name: ${dev_name} Idle Sensor
      on_press:
        then:
          - light.turn_off: backlight
      on_release:
        then:
          - light.turn_on: backlight


